{"paragraphs":[{"text":"%md\n\n# 获取MXNet内置model","user":"anonymous","dateUpdated":"2021-05-20T16:19:22+0800","progress":0,"config":{"colWidth":12,"fontSize":9,"editorHide":true,"results":{},"enabled":true,"editorSetting":{}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h1>获取MXNet内置model</h1>\n\n</div>"}]},"apps":[],"runtimeInfos":{},"progressUpdateIntervalMs":500,"jobName":"paragraph_1621498693543_2113600838","id":"paragraph_1621498693543_2113600838","dateCreated":"2021-05-20T16:18:13+0800","dateStarted":"2021-05-20T16:19:20+0800","dateFinished":"2021-05-20T16:19:20+0800","status":"FINISHED","focus":true},{"text":"%python.ipython\nimport mxnet as mx\nfrom mxnet import gluon\n\nmodel_name = 'resnet50_v2'\n\n# resnet pretrained 即 resnet50_1000_imagenet_classifier，是一个对图像中的物体进行分类识别的神经网络。共计能识别1000种分类。\n# 即(output): Dense(2048 -> 1000, linear)\npretrained_net = gluon.model_zoo.vision.get_model(model_name, pretrained=True)\npretrained_net","user":"anonymous","dateUpdated":"2021-05-20T15:07:26+0800","progress":0,"config":{"colWidth":12,"fontSize":9,"results":{},"enabled":true,"editorSetting":{}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"ResNetV2(\n  (features): HybridSequential(\n    (0): BatchNorm(axis=1, eps=1e-05, momentum=0.9, fix_gamma=True, use_global_stats=False, in_channels=3)\n    (1): Conv2D(3 -> 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)\n    (2): BatchNorm(axis=1, eps=1e-05, momentum=0.9, fix_gamma=False, use_global_stats=False, in_channels=64)\n    (3): Activation(relu)\n    (4): MaxPool2D(size=(3, 3), stride=(2, 2), padding=(1, 1), ceil_mode=False, global_pool=False, pool_type=max, layout=NCHW)\n    (5): HybridSequential(\n      (0): BottleneckV2(\n        (bn1): BatchNorm(axis=1, eps=1e-05, momentum=0.9, fix_gamma=False, use_global_stats=False, in_channels=64)\n        (conv1): Conv2D(64 -> 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn2): BatchNorm(axis=1, eps=1e-05, momentum=0.9, fix_gamma=False, use_global_stats=False, in_channels=64)\n        (conv2): Conv2D(64 -> 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn3): BatchNorm(axis=1, eps=1e-05, momentum=0.9, fix_gamma=False, use_global_stats=False, in_channels=64)\n        (conv3): Conv2D(64 -> 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (downsample): Conv2D(64 -> 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      )\n      (1): BottleneckV2(\n        (bn1): BatchNorm(axis=1, eps=1e-05, momentum=0.9, fix_gamma=False, use_global_stats=False, in_channels=256)\n        (conv1): Conv2D(256 -> 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn2): BatchNorm(axis=1, eps=1e-05, momentum=0.9, fix_gamma=False, use_global_stats=False, in_channels=64)\n        (conv2): Conv2D(64 -> 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn3): BatchNorm(axis=1, eps=1e-05, momentum=0.9, fix_gamma=False, use_global_stats=False, in_channels=64)\n        (conv3): Conv2D(64 -> 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      )\n      (2): BottleneckV2(\n        (bn1): BatchNorm(axis=1, eps=1e-05, momentum=0.9, fix_gamma=False, use_global_stats=False, in_channels=256)\n        (conv1): Conv2D(256 -> 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn2): BatchNorm(axis=1, eps=1e-05, momentum=0.9, fix_gamma=False, use_global_stats=False, in_channels=64)\n        (conv2): Conv2D(64 -> 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn3): BatchNorm(axis=1, eps=1e-05, momentum=0.9, fix_gamma=False, use_global_stats=False, in_channels=64)\n        (conv3): Conv2D(64 -> 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      )\n    )\n    (6): HybridSequential(\n      (0): BottleneckV2(\n        (bn1): BatchNorm(axis=1, eps=1e-05, momentum=0.9, fix_gamma=False, use_global_stats=False, in_channels=256)\n        (conv1): Conv2D(256 -> 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn2): BatchNorm(axis=1, eps=1e-05, momentum=0.9, fix_gamma=False, use_global_stats=False, in_channels=128)\n        (conv2): Conv2D(128 -> 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n        (bn3): BatchNorm(axis=1, eps=1e-05, momentum=0.9, fix_gamma=False, use_global_stats=False, in_channels=128)\n        (conv3): Conv2D(128 -> 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (downsample): Conv2D(256 -> 512, kernel_size=(1, 1), stride=(2, 2), bias=False)\n      )\n      (1): BottleneckV2(\n        (bn1): BatchNorm(axis=1, eps=1e-05, momentum=0.9, fix_gamma=False, use_global_stats=False, in_channels=512)\n        (conv1): Conv2D(512 -> 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn2): BatchNorm(axis=1, eps=1e-05, momentum=0.9, fix_gamma=False, use_global_stats=False, in_channels=128)\n        (conv2): Conv2D(128 -> 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn3): BatchNorm(axis=1, eps=1e-05, momentum=0.9, fix_gamma=False, use_global_stats=False, in_channels=128)\n        (conv3): Conv2D(128 -> 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      )\n      (2): BottleneckV2(\n        (bn1): BatchNorm(axis=1, eps=1e-05, momentum=0.9, fix_gamma=False, use_global_stats=False, in_channels=512)\n        (conv1): Conv2D(512 -> 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn2): BatchNorm(axis=1, eps=1e-05, momentum=0.9, fix_gamma=False, use_global_stats=False, in_channels=128)\n        (conv2): Conv2D(128 -> 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn3): BatchNorm(axis=1, eps=1e-05, momentum=0.9, fix_gamma=False, use_global_stats=False, in_channels=128)\n        (conv3): Conv2D(128 -> 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      )\n      (3): BottleneckV2(\n        (bn1): BatchNorm(axis=1, eps=1e-05, momentum=0.9, fix_gamma=False, use_global_stats=False, in_channels=512)\n        (conv1): Conv2D(512 -> 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn2): BatchNorm(axis=1, eps=1e-05, momentum=0.9, fix_gamma=False, use_global_stats=False, in_channels=128)\n        (conv2): Conv2D(128 -> 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn3): BatchNorm(axis=1, eps=1e-05, momentum=0.9, fix_gamma=False, use_global_stats=False, in_channels=128)\n        (conv3): Conv2D(128 -> 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      )\n    )\n    (7): HybridSequential(\n      (0): BottleneckV2(\n        (bn1): BatchNorm(axis=1, eps=1e-05, momentum=0.9, fix_gamma=False, use_global_stats=False, in_channels=512)\n        (conv1): Conv2D(512 -> 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn2): BatchNorm(axis=1, eps=1e-05, momentum=0.9, fix_gamma=False, use_global_stats=False, in_channels=256)\n        (conv2): Conv2D(256 -> 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n        (bn3): BatchNorm(axis=1, eps=1e-05, momentum=0.9, fix_gamma=False, use_global_stats=False, in_channels=256)\n        (conv3): Conv2D(256 -> 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (downsample): Conv2D(512 -> 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)\n      )\n      (1): BottleneckV2(\n        (bn1): BatchNorm(axis=1, eps=1e-05, momentum=0.9, fix_gamma=False, use_global_stats=False, in_channels=1024)\n        (conv1): Conv2D(1024 -> 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn2): BatchNorm(axis=1, eps=1e-05, momentum=0.9, fix_gamma=False, use_global_stats=False, in_channels=256)\n        (conv2): Conv2D(256 -> 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn3): BatchNorm(axis=1, eps=1e-05, momentum=0.9, fix_gamma=False, use_global_stats=False, in_channels=256)\n        (conv3): Conv2D(256 -> 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      )\n      (2): BottleneckV2(\n        (bn1): BatchNorm(axis=1, eps=1e-05, momentum=0.9, fix_gamma=False, use_global_stats=False, in_channels=1024)\n        (conv1): Conv2D(1024 -> 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn2): BatchNorm(axis=1, eps=1e-05, momentum=0.9, fix_gamma=False, use_global_stats=False, in_channels=256)\n        (conv2): Conv2D(256 -> 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn3): BatchNorm(axis=1, eps=1e-05, momentum=0.9, fix_gamma=False, use_global_stats=False, in_channels=256)\n        (conv3): Conv2D(256 -> 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      )\n      (3): BottleneckV2(\n        (bn1): BatchNorm(axis=1, eps=1e-05, momentum=0.9, fix_gamma=False, use_global_stats=False, in_channels=1024)\n        (conv1): Conv2D(1024 -> 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn2): BatchNorm(axis=1, eps=1e-05, momentum=0.9, fix_gamma=False, use_global_stats=False, in_channels=256)\n        (conv2): Conv2D(256 -> 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn3): BatchNorm(axis=1, eps=1e-05, momentum=0.9, fix_gamma=False, use_global_stats=False, in_channels=256)\n        (conv3): Conv2D(256 -> 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      )\n      (4): BottleneckV2(\n        (bn1): BatchNorm(axis=1, eps=1e-05, momentum=0.9, fix_gamma=False, use_global_stats=False, in_channels=1024)\n        (conv1): Conv2D(1024 -> 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn2): BatchNorm(axis=1, eps=1e-05, momentum=0.9, fix_gamma=False, use_global_stats=False, in_channels=256)\n        (conv2): Conv2D(256 -> 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn3): BatchNorm(axis=1, eps=1e-05, momentum=0.9, fix_gamma=False, use_global_stats=False, in_channels=256)\n        (conv3): Conv2D(256 -> 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      )\n      (5): BottleneckV2(\n        (bn1): BatchNorm(axis=1, eps=1e-05, momentum=0.9, fix_gamma=False, use_global_stats=False, in_channels=1024)\n        (conv1): Conv2D(1024 -> 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn2): BatchNorm(axis=1, eps=1e-05, momentum=0.9, fix_gamma=False, use_global_stats=False, in_channels=256)\n        (conv2): Conv2D(256 -> 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn3): BatchNorm(axis=1, eps=1e-05, momentum=0.9, fix_gamma=False, use_global_stats=False, in_channels=256)\n        (conv3): Conv2D(256 -> 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      )\n    )\n    (8): HybridSequential(\n      (0): BottleneckV2(\n        (bn1): BatchNorm(axis=1, eps=1e-05, momentum=0.9, fix_gamma=False, use_global_stats=False, in_channels=1024)\n        (conv1): Conv2D(1024 -> 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn2): BatchNorm(axis=1, eps=1e-05, momentum=0.9, fix_gamma=False, use_global_stats=False, in_channels=512)\n        (conv2): Conv2D(512 -> 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n        (bn3): BatchNorm(axis=1, eps=1e-05, momentum=0.9, fix_gamma=False, use_global_stats=False, in_channels=512)\n        (conv3): Conv2D(512 -> 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (downsample): Conv2D(1024 -> 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)\n      )\n      (1): BottleneckV2(\n        (bn1): BatchNorm(axis=1, eps=1e-05, momentum=0.9, fix_gamma=False, use_global_stats=False, in_channels=2048)\n        (conv1): Conv2D(2048 -> 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn2): BatchNorm(axis=1, eps=1e-05, momentum=0.9, fix_gamma=False, use_global_stats=False, in_channels=512)\n        (conv2): Conv2D(512 -> 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn3): BatchNorm(axis=1, eps=1e-05, momentum=0.9, fix_gamma=False, use_global_stats=False, in_channels=512)\n        (conv3): Conv2D(512 -> 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      )\n      (2): BottleneckV2(\n        (bn1): BatchNorm(axis=1, eps=1e-05, momentum=0.9, fix_gamma=False, use_global_stats=False, in_channels=2048)\n        (conv1): Conv2D(2048 -> 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn2): BatchNorm(axis=1, eps=1e-05, momentum=0.9, fix_gamma=False, use_global_stats=False, in_channels=512)\n        (conv2): Conv2D(512 -> 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn3): BatchNorm(axis=1, eps=1e-05, momentum=0.9, fix_gamma=False, use_global_stats=False, in_channels=512)\n        (conv3): Conv2D(512 -> 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      )\n    )\n    (9): BatchNorm(axis=1, eps=1e-05, momentum=0.9, fix_gamma=False, use_global_stats=False, in_channels=2048)\n    (10): Activation(relu)\n    (11): GlobalAvgPool2D(size=(1, 1), stride=(1, 1), padding=(0, 0), ceil_mode=True, global_pool=True, pool_type=avg, layout=NCHW)\n    (12): Flatten\n  )\n  (output): Dense(2048 -> 1000, linear)\n)"}]},"apps":[],"runtimeInfos":{},"progressUpdateIntervalMs":500,"jobName":"paragraph_1621239293145_1196308553","id":"paragraph_1621239293145_1196308553","dateCreated":"2021-05-17T16:14:53+0800","dateStarted":"2021-05-17T17:23:09+0800","dateFinished":"2021-05-17T17:23:11+0800","status":"FINISHED"},{"text":"%python.ipython\n\n# 这是利用迁移学习后得到的网络，claasses=8, 所以这个网络可以分类的种类数量为8\n# 即(output): Dense(2048 -> 8, linear)\nfinetune_net = gluon.model_zoo.vision.get_model(model_name, classes=8)\n","user":"anonymous","dateUpdated":"2021-05-17T17:24:05+0800","progress":0,"config":{"colWidth":12,"fontSize":9,"results":{},"enabled":true,"editorSetting":{}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"ResNetV2(\n  (features): HybridSequential(\n    (0): BatchNorm(axis=1, eps=1e-05, momentum=0.9, fix_gamma=True, use_global_stats=False, in_channels=None)\n    (1): Conv2D(None -> 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)\n    (2): BatchNorm(axis=1, eps=1e-05, momentum=0.9, fix_gamma=False, use_global_stats=False, in_channels=None)\n    (3): Activation(relu)\n    (4): MaxPool2D(size=(3, 3), stride=(2, 2), padding=(1, 1), ceil_mode=False, global_pool=False, pool_type=max, layout=NCHW)\n    (5): HybridSequential(\n      (0): BottleneckV2(\n        (bn1): BatchNorm(axis=1, eps=1e-05, momentum=0.9, fix_gamma=False, use_global_stats=False, in_channels=None)\n        (conv1): Conv2D(None -> 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn2): BatchNorm(axis=1, eps=1e-05, momentum=0.9, fix_gamma=False, use_global_stats=False, in_channels=None)\n        (conv2): Conv2D(64 -> 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn3): BatchNorm(axis=1, eps=1e-05, momentum=0.9, fix_gamma=False, use_global_stats=False, in_channels=None)\n        (conv3): Conv2D(None -> 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (downsample): Conv2D(64 -> 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      )\n      (1): BottleneckV2(\n        (bn1): BatchNorm(axis=1, eps=1e-05, momentum=0.9, fix_gamma=False, use_global_stats=False, in_channels=None)\n        (conv1): Conv2D(None -> 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn2): BatchNorm(axis=1, eps=1e-05, momentum=0.9, fix_gamma=False, use_global_stats=False, in_channels=None)\n        (conv2): Conv2D(64 -> 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn3): BatchNorm(axis=1, eps=1e-05, momentum=0.9, fix_gamma=False, use_global_stats=False, in_channels=None)\n        (conv3): Conv2D(None -> 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      )\n      (2): BottleneckV2(\n        (bn1): BatchNorm(axis=1, eps=1e-05, momentum=0.9, fix_gamma=False, use_global_stats=False, in_channels=None)\n        (conv1): Conv2D(None -> 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn2): BatchNorm(axis=1, eps=1e-05, momentum=0.9, fix_gamma=False, use_global_stats=False, in_channels=None)\n        (conv2): Conv2D(64 -> 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn3): BatchNorm(axis=1, eps=1e-05, momentum=0.9, fix_gamma=False, use_global_stats=False, in_channels=None)\n        (conv3): Conv2D(None -> 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      )\n    )\n    (6): HybridSequential(\n      (0): BottleneckV2(\n        (bn1): BatchNorm(axis=1, eps=1e-05, momentum=0.9, fix_gamma=False, use_global_stats=False, in_channels=None)\n        (conv1): Conv2D(None -> 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn2): BatchNorm(axis=1, eps=1e-05, momentum=0.9, fix_gamma=False, use_global_stats=False, in_channels=None)\n        (conv2): Conv2D(128 -> 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n        (bn3): BatchNorm(axis=1, eps=1e-05, momentum=0.9, fix_gamma=False, use_global_stats=False, in_channels=None)\n        (conv3): Conv2D(None -> 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (downsample): Conv2D(256 -> 512, kernel_size=(1, 1), stride=(2, 2), bias=False)\n      )\n      (1): BottleneckV2(\n        (bn1): BatchNorm(axis=1, eps=1e-05, momentum=0.9, fix_gamma=False, use_global_stats=False, in_channels=None)\n        (conv1): Conv2D(None -> 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn2): BatchNorm(axis=1, eps=1e-05, momentum=0.9, fix_gamma=False, use_global_stats=False, in_channels=None)\n        (conv2): Conv2D(128 -> 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn3): BatchNorm(axis=1, eps=1e-05, momentum=0.9, fix_gamma=False, use_global_stats=False, in_channels=None)\n        (conv3): Conv2D(None -> 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      )\n      (2): BottleneckV2(\n        (bn1): BatchNorm(axis=1, eps=1e-05, momentum=0.9, fix_gamma=False, use_global_stats=False, in_channels=None)\n        (conv1): Conv2D(None -> 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn2): BatchNorm(axis=1, eps=1e-05, momentum=0.9, fix_gamma=False, use_global_stats=False, in_channels=None)\n        (conv2): Conv2D(128 -> 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn3): BatchNorm(axis=1, eps=1e-05, momentum=0.9, fix_gamma=False, use_global_stats=False, in_channels=None)\n        (conv3): Conv2D(None -> 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      )\n      (3): BottleneckV2(\n        (bn1): BatchNorm(axis=1, eps=1e-05, momentum=0.9, fix_gamma=False, use_global_stats=False, in_channels=None)\n        (conv1): Conv2D(None -> 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn2): BatchNorm(axis=1, eps=1e-05, momentum=0.9, fix_gamma=False, use_global_stats=False, in_channels=None)\n        (conv2): Conv2D(128 -> 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn3): BatchNorm(axis=1, eps=1e-05, momentum=0.9, fix_gamma=False, use_global_stats=False, in_channels=None)\n        (conv3): Conv2D(None -> 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      )\n    )\n    (7): HybridSequential(\n      (0): BottleneckV2(\n        (bn1): BatchNorm(axis=1, eps=1e-05, momentum=0.9, fix_gamma=False, use_global_stats=False, in_channels=None)\n        (conv1): Conv2D(None -> 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn2): BatchNorm(axis=1, eps=1e-05, momentum=0.9, fix_gamma=False, use_global_stats=False, in_channels=None)\n        (conv2): Conv2D(256 -> 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n        (bn3): BatchNorm(axis=1, eps=1e-05, momentum=0.9, fix_gamma=False, use_global_stats=False, in_channels=None)\n        (conv3): Conv2D(None -> 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (downsample): Conv2D(512 -> 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)\n      )\n      (1): BottleneckV2(\n        (bn1): BatchNorm(axis=1, eps=1e-05, momentum=0.9, fix_gamma=False, use_global_stats=False, in_channels=None)\n        (conv1): Conv2D(None -> 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn2): BatchNorm(axis=1, eps=1e-05, momentum=0.9, fix_gamma=False, use_global_stats=False, in_channels=None)\n        (conv2): Conv2D(256 -> 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn3): BatchNorm(axis=1, eps=1e-05, momentum=0.9, fix_gamma=False, use_global_stats=False, in_channels=None)\n        (conv3): Conv2D(None -> 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      )\n      (2): BottleneckV2(\n        (bn1): BatchNorm(axis=1, eps=1e-05, momentum=0.9, fix_gamma=False, use_global_stats=False, in_channels=None)\n        (conv1): Conv2D(None -> 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn2): BatchNorm(axis=1, eps=1e-05, momentum=0.9, fix_gamma=False, use_global_stats=False, in_channels=None)\n        (conv2): Conv2D(256 -> 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn3): BatchNorm(axis=1, eps=1e-05, momentum=0.9, fix_gamma=False, use_global_stats=False, in_channels=None)\n        (conv3): Conv2D(None -> 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      )\n      (3): BottleneckV2(\n        (bn1): BatchNorm(axis=1, eps=1e-05, momentum=0.9, fix_gamma=False, use_global_stats=False, in_channels=None)\n        (conv1): Conv2D(None -> 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn2): BatchNorm(axis=1, eps=1e-05, momentum=0.9, fix_gamma=False, use_global_stats=False, in_channels=None)\n        (conv2): Conv2D(256 -> 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn3): BatchNorm(axis=1, eps=1e-05, momentum=0.9, fix_gamma=False, use_global_stats=False, in_channels=None)\n        (conv3): Conv2D(None -> 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      )\n      (4): BottleneckV2(\n        (bn1): BatchNorm(axis=1, eps=1e-05, momentum=0.9, fix_gamma=False, use_global_stats=False, in_channels=None)\n        (conv1): Conv2D(None -> 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn2): BatchNorm(axis=1, eps=1e-05, momentum=0.9, fix_gamma=False, use_global_stats=False, in_channels=None)\n        (conv2): Conv2D(256 -> 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn3): BatchNorm(axis=1, eps=1e-05, momentum=0.9, fix_gamma=False, use_global_stats=False, in_channels=None)\n        (conv3): Conv2D(None -> 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      )\n      (5): BottleneckV2(\n        (bn1): BatchNorm(axis=1, eps=1e-05, momentum=0.9, fix_gamma=False, use_global_stats=False, in_channels=None)\n        (conv1): Conv2D(None -> 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn2): BatchNorm(axis=1, eps=1e-05, momentum=0.9, fix_gamma=False, use_global_stats=False, in_channels=None)\n        (conv2): Conv2D(256 -> 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn3): BatchNorm(axis=1, eps=1e-05, momentum=0.9, fix_gamma=False, use_global_stats=False, in_channels=None)\n        (conv3): Conv2D(None -> 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      )\n    )\n    (8): HybridSequential(\n      (0): BottleneckV2(\n        (bn1): BatchNorm(axis=1, eps=1e-05, momentum=0.9, fix_gamma=False, use_global_stats=False, in_channels=None)\n        (conv1): Conv2D(None -> 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn2): BatchNorm(axis=1, eps=1e-05, momentum=0.9, fix_gamma=False, use_global_stats=False, in_channels=None)\n        (conv2): Conv2D(512 -> 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n        (bn3): BatchNorm(axis=1, eps=1e-05, momentum=0.9, fix_gamma=False, use_global_stats=False, in_channels=None)\n        (conv3): Conv2D(None -> 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (downsample): Conv2D(1024 -> 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)\n      )\n      (1): BottleneckV2(\n        (bn1): BatchNorm(axis=1, eps=1e-05, momentum=0.9, fix_gamma=False, use_global_stats=False, in_channels=None)\n        (conv1): Conv2D(None -> 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn2): BatchNorm(axis=1, eps=1e-05, momentum=0.9, fix_gamma=False, use_global_stats=False, in_channels=None)\n        (conv2): Conv2D(512 -> 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn3): BatchNorm(axis=1, eps=1e-05, momentum=0.9, fix_gamma=False, use_global_stats=False, in_channels=None)\n        (conv3): Conv2D(None -> 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      )\n      (2): BottleneckV2(\n        (bn1): BatchNorm(axis=1, eps=1e-05, momentum=0.9, fix_gamma=False, use_global_stats=False, in_channels=None)\n        (conv1): Conv2D(None -> 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn2): BatchNorm(axis=1, eps=1e-05, momentum=0.9, fix_gamma=False, use_global_stats=False, in_channels=None)\n        (conv2): Conv2D(512 -> 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn3): BatchNorm(axis=1, eps=1e-05, momentum=0.9, fix_gamma=False, use_global_stats=False, in_channels=None)\n        (conv3): Conv2D(None -> 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      )\n    )\n    (9): BatchNorm(axis=1, eps=1e-05, momentum=0.9, fix_gamma=False, use_global_stats=False, in_channels=None)\n    (10): Activation(relu)\n    (11): GlobalAvgPool2D(size=(1, 1), stride=(1, 1), padding=(0, 0), ceil_mode=True, global_pool=True, pool_type=avg, layout=NCHW)\n    (12): Flatten\n  )\n  (output): Dense(2048 -> 8, linear)\n)"}]},"apps":[],"runtimeInfos":{},"progressUpdateIntervalMs":500,"jobName":"paragraph_1621242591907_1848258435","id":"paragraph_1621242591907_1848258435","dateCreated":"2021-05-17T17:09:51+0800","dateStarted":"2021-05-17T17:10:31+0800","dateFinished":"2021-05-17T17:10:31+0800","status":"FINISHED"},{"text":"%python.ipython\n\nprint(finetune_net.collect_params())","user":"anonymous","dateUpdated":"2021-05-17T17:54:30+0800","progress":0,"config":{"colWidth":12,"fontSize":9,"results":{},"enabled":true,"editorSetting":{}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"resnetv21_ (\n  Parameter resnetv21_batchnorm0_gamma (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_batchnorm0_beta (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_batchnorm0_running_mean (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_batchnorm0_running_var (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_conv0_weight (shape=(64, 0, 7, 7), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_batchnorm1_gamma (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_batchnorm1_beta (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_batchnorm1_running_mean (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_batchnorm1_running_var (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage1_batchnorm0_gamma (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage1_batchnorm0_beta (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage1_batchnorm0_running_mean (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage1_batchnorm0_running_var (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage1_conv0_weight (shape=(64, 0, 1, 1), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage1_batchnorm1_gamma (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage1_batchnorm1_beta (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage1_batchnorm1_running_mean (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage1_batchnorm1_running_var (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage1_conv1_weight (shape=(64, 64, 3, 3), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage1_batchnorm2_gamma (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage1_batchnorm2_beta (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage1_batchnorm2_running_mean (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage1_batchnorm2_running_var (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage1_conv2_weight (shape=(256, 0, 1, 1), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage1_conv3_weight (shape=(256, 64, 1, 1), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage1_batchnorm3_gamma (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage1_batchnorm3_beta (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage1_batchnorm3_running_mean (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage1_batchnorm3_running_var (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage1_conv4_weight (shape=(64, 0, 1, 1), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage1_batchnorm4_gamma (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage1_batchnorm4_beta (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage1_batchnorm4_running_mean (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage1_batchnorm4_running_var (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage1_conv5_weight (shape=(64, 64, 3, 3), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage1_batchnorm5_gamma (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage1_batchnorm5_beta (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage1_batchnorm5_running_mean (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage1_batchnorm5_running_var (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage1_conv6_weight (shape=(256, 0, 1, 1), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage1_batchnorm6_gamma (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage1_batchnorm6_beta (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage1_batchnorm6_running_mean (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage1_batchnorm6_running_var (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage1_conv7_weight (shape=(64, 0, 1, 1), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage1_batchnorm7_gamma (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage1_batchnorm7_beta (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage1_batchnorm7_running_mean (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage1_batchnorm7_running_var (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage1_conv8_weight (shape=(64, 64, 3, 3), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage1_batchnorm8_gamma (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage1_batchnorm8_beta (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage1_batchnorm8_running_mean (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage1_batchnorm8_running_var (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage1_conv9_weight (shape=(256, 0, 1, 1), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage2_batchnorm0_gamma (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage2_batchnorm0_beta (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage2_batchnorm0_running_mean (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage2_batchnorm0_running_var (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage2_conv0_weight (shape=(128, 0, 1, 1), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage2_batchnorm1_gamma (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage2_batchnorm1_beta (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage2_batchnorm1_running_mean (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage2_batchnorm1_running_var (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage2_conv1_weight (shape=(128, 128, 3, 3), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage2_batchnorm2_gamma (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage2_batchnorm2_beta (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage2_batchnorm2_running_mean (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage2_batchnorm2_running_var (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage2_conv2_weight (shape=(512, 0, 1, 1), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage2_conv3_weight (shape=(512, 256, 1, 1), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage2_batchnorm3_gamma (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage2_batchnorm3_beta (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage2_batchnorm3_running_mean (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage2_batchnorm3_running_var (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage2_conv4_weight (shape=(128, 0, 1, 1), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage2_batchnorm4_gamma (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage2_batchnorm4_beta (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage2_batchnorm4_running_mean (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage2_batchnorm4_running_var (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage2_conv5_weight (shape=(128, 128, 3, 3), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage2_batchnorm5_gamma (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage2_batchnorm5_beta (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage2_batchnorm5_running_mean (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage2_batchnorm5_running_var (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage2_conv6_weight (shape=(512, 0, 1, 1), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage2_batchnorm6_gamma (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage2_batchnorm6_beta (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage2_batchnorm6_running_mean (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage2_batchnorm6_running_var (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage2_conv7_weight (shape=(128, 0, 1, 1), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage2_batchnorm7_gamma (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage2_batchnorm7_beta (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage2_batchnorm7_running_mean (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage2_batchnorm7_running_var (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage2_conv8_weight (shape=(128, 128, 3, 3), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage2_batchnorm8_gamma (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage2_batchnorm8_beta (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage2_batchnorm8_running_mean (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage2_batchnorm8_running_var (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage2_conv9_weight (shape=(512, 0, 1, 1), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage2_batchnorm9_gamma (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage2_batchnorm9_beta (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage2_batchnorm9_running_mean (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage2_batchnorm9_running_var (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage2_conv10_weight (shape=(128, 0, 1, 1), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage2_batchnorm10_gamma (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage2_batchnorm10_beta (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage2_batchnorm10_running_mean (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage2_batchnorm10_running_var (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage2_conv11_weight (shape=(128, 128, 3, 3), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage2_batchnorm11_gamma (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage2_batchnorm11_beta (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage2_batchnorm11_running_mean (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage2_batchnorm11_running_var (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage2_conv12_weight (shape=(512, 0, 1, 1), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage3_batchnorm0_gamma (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage3_batchnorm0_beta (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage3_batchnorm0_running_mean (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage3_batchnorm0_running_var (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage3_conv0_weight (shape=(256, 0, 1, 1), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage3_batchnorm1_gamma (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage3_batchnorm1_beta (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage3_batchnorm1_running_mean (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage3_batchnorm1_running_var (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage3_conv1_weight (shape=(256, 256, 3, 3), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage3_batchnorm2_gamma (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage3_batchnorm2_beta (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage3_batchnorm2_running_mean (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage3_batchnorm2_running_var (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage3_conv2_weight (shape=(1024, 0, 1, 1), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage3_conv3_weight (shape=(1024, 512, 1, 1), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage3_batchnorm3_gamma (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage3_batchnorm3_beta (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage3_batchnorm3_running_mean (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage3_batchnorm3_running_var (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage3_conv4_weight (shape=(256, 0, 1, 1), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage3_batchnorm4_gamma (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage3_batchnorm4_beta (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage3_batchnorm4_running_mean (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage3_batchnorm4_running_var (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage3_conv5_weight (shape=(256, 256, 3, 3), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage3_batchnorm5_gamma (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage3_batchnorm5_beta (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage3_batchnorm5_running_mean (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage3_batchnorm5_running_var (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage3_conv6_weight (shape=(1024, 0, 1, 1), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage3_batchnorm6_gamma (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage3_batchnorm6_beta (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage3_batchnorm6_running_mean (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage3_batchnorm6_running_var (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage3_conv7_weight (shape=(256, 0, 1, 1), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage3_batchnorm7_gamma (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage3_batchnorm7_beta (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage3_batchnorm7_running_mean (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage3_batchnorm7_running_var (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage3_conv8_weight (shape=(256, 256, 3, 3), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage3_batchnorm8_gamma (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage3_batchnorm8_beta (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage3_batchnorm8_running_mean (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage3_batchnorm8_running_var (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage3_conv9_weight (shape=(1024, 0, 1, 1), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage3_batchnorm9_gamma (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage3_batchnorm9_beta (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage3_batchnorm9_running_mean (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage3_batchnorm9_running_var (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage3_conv10_weight (shape=(256, 0, 1, 1), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage3_batchnorm10_gamma (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage3_batchnorm10_beta (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage3_batchnorm10_running_mean (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage3_batchnorm10_running_var (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage3_conv11_weight (shape=(256, 256, 3, 3), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage3_batchnorm11_gamma (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage3_batchnorm11_beta (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage3_batchnorm11_running_mean (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage3_batchnorm11_running_var (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage3_conv12_weight (shape=(1024, 0, 1, 1), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage3_batchnorm12_gamma (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage3_batchnorm12_beta (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage3_batchnorm12_running_mean (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage3_batchnorm12_running_var (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage3_conv13_weight (shape=(256, 0, 1, 1), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage3_batchnorm13_gamma (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage3_batchnorm13_beta (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage3_batchnorm13_running_mean (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage3_batchnorm13_running_var (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage3_conv14_weight (shape=(256, 256, 3, 3), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage3_batchnorm14_gamma (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage3_batchnorm14_beta (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage3_batchnorm14_running_mean (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage3_batchnorm14_running_var (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage3_conv15_weight (shape=(1024, 0, 1, 1), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage3_batchnorm15_gamma (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage3_batchnorm15_beta (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage3_batchnorm15_running_mean (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage3_batchnorm15_running_var (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage3_conv16_weight (shape=(256, 0, 1, 1), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage3_batchnorm16_gamma (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage3_batchnorm16_beta (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage3_batchnorm16_running_mean (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage3_batchnorm16_running_var (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage3_conv17_weight (shape=(256, 256, 3, 3), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage3_batchnorm17_gamma (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage3_batchnorm17_beta (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage3_batchnorm17_running_mean (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage3_batchnorm17_running_var (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage3_conv18_weight (shape=(1024, 0, 1, 1), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage4_batchnorm0_gamma (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage4_batchnorm0_beta (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage4_batchnorm0_running_mean (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage4_batchnorm0_running_var (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage4_conv0_weight (shape=(512, 0, 1, 1), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage4_batchnorm1_gamma (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage4_batchnorm1_beta (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage4_batchnorm1_running_mean (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage4_batchnorm1_running_var (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage4_conv1_weight (shape=(512, 512, 3, 3), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage4_batchnorm2_gamma (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage4_batchnorm2_beta (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage4_batchnorm2_running_mean (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage4_batchnorm2_running_var (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage4_conv2_weight (shape=(2048, 0, 1, 1), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage4_conv3_weight (shape=(2048, 1024, 1, 1), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage4_batchnorm3_gamma (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage4_batchnorm3_beta (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage4_batchnorm3_running_mean (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage4_batchnorm3_running_var (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage4_conv4_weight (shape=(512, 0, 1, 1), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage4_batchnorm4_gamma (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage4_batchnorm4_beta (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage4_batchnorm4_running_mean (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage4_batchnorm4_running_var (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage4_conv5_weight (shape=(512, 512, 3, 3), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage4_batchnorm5_gamma (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage4_batchnorm5_beta (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage4_batchnorm5_running_mean (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage4_batchnorm5_running_var (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage4_conv6_weight (shape=(2048, 0, 1, 1), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage4_batchnorm6_gamma (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage4_batchnorm6_beta (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage4_batchnorm6_running_mean (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage4_batchnorm6_running_var (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage4_conv7_weight (shape=(512, 0, 1, 1), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage4_batchnorm7_gamma (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage4_batchnorm7_beta (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage4_batchnorm7_running_mean (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage4_batchnorm7_running_var (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage4_conv8_weight (shape=(512, 512, 3, 3), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage4_batchnorm8_gamma (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage4_batchnorm8_beta (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage4_batchnorm8_running_mean (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage4_batchnorm8_running_var (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_stage4_conv9_weight (shape=(2048, 0, 1, 1), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_batchnorm2_gamma (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_batchnorm2_beta (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_batchnorm2_running_mean (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_batchnorm2_running_var (shape=(0,), dtype=<class 'numpy.float32'>)\n  Parameter resnetv21_dense0_weight (shape=(8, 2048), dtype=float32)\n  Parameter resnetv21_dense0_bias (shape=(8,), dtype=float32)\n)\n"}]},"apps":[],"runtimeInfos":{},"progressUpdateIntervalMs":500,"jobName":"paragraph_1621242631521_331096594","id":"paragraph_1621242631521_331096594","dateCreated":"2021-05-17T17:10:31+0800","dateStarted":"2021-05-17T17:54:30+0800","dateFinished":"2021-05-17T17:54:30+0800","status":"FINISHED"},{"text":"%md\n\n# 新建空白模型\n","user":"anonymous","dateUpdated":"2021-05-20T16:21:01+0800","progress":0,"config":{"colWidth":12,"fontSize":9,"editorHide":true,"results":{},"enabled":true,"editorSetting":{}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h1>新建空白模型</h1>\n\n</div>"}]},"apps":[],"runtimeInfos":{},"progressUpdateIntervalMs":500,"jobName":"paragraph_1621498843736_2058486377","id":"paragraph_1621498843736_2058486377","dateCreated":"2021-05-20T16:20:43+0800","dateStarted":"2021-05-20T16:21:01+0800","dateFinished":"2021-05-20T16:21:01+0800","status":"FINISHED"},{"text":"%python.ipython\n\nfrom mxnet import np, npx\nfrom mxnet.gluon import nn\n\n# this is required to activate NumPy-like behaviors\nnpx.set_np()\n\n# set up the network\nnet = nn.Sequential()\n\n# add two levels\nnet.add(nn.Dense(256, activation='relu'))\nnet.add(nn.Dense(10))\n\nnet.initialize()\n\n# 生成均匀分布的随机数\nX = np.random.uniform(size=(2, 22))\nX","user":"anonymous","dateUpdated":"2021-05-20T15:46:56+0800","progress":0,"config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"array([[8.31538379e-01, 8.74992013e-01, 5.88851988e-01, 7.83685565e-01,\n        5.12653232e-01, 1.30479887e-01, 5.78983307e-01, 3.21539402e-01,\n        3.93595725e-01, 1.47942707e-01, 2.70470381e-01, 3.86780590e-01,\n        4.60393667e-01, 6.53374314e-01, 1.38056695e-01, 2.60534495e-01,\n        6.19638205e-01, 7.63857841e-01, 5.46859145e-01, 9.65198576e-01,\n        6.73078418e-01, 6.11198485e-01],\n       [6.38266623e-01, 3.31985950e-01, 9.23960388e-01, 7.32896388e-01,\n        5.17146885e-01, 2.64014155e-01, 1.24760456e-02, 8.85369956e-01,\n        8.80331695e-01, 7.62420118e-01, 1.20975904e-01, 4.20119762e-01,\n        7.29194462e-01, 7.31852710e-01, 1.97423995e-01, 3.93060502e-04,\n        1.23299681e-01, 7.82957435e-01, 9.54745650e-01, 7.40859747e-01,\n        3.57107408e-02, 3.78111422e-01]])"}]},"apps":[],"runtimeInfos":{},"progressUpdateIntervalMs":500,"jobName":"paragraph_1621244822925_1627440555","id":"paragraph_1621244822925_1627440555","dateCreated":"2021-05-17T17:47:02+0800","dateStarted":"2021-05-20T15:46:56+0800","dateFinished":"2021-05-20T15:46:56+0800","status":"FINISHED"},{"text":"%python.ipython\n\n# 输入向量的长度暂时为-1，被调用后才会确定\nnet","user":"anonymous","dateUpdated":"2021-05-20T15:46:59+0800","progress":0,"config":{"colWidth":12,"fontSize":9,"results":{},"enabled":true,"editorSetting":{}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Sequential(\n  (0): Dense(-1 -> 256, Activation(relu))\n  (1): Dense(-1 -> 10, linear)\n)"}]},"apps":[],"runtimeInfos":{},"progressUpdateIntervalMs":500,"jobName":"paragraph_1621495202742_1886639831","id":"paragraph_1621495202742_1886639831","dateCreated":"2021-05-20T15:20:02+0800","dateStarted":"2021-05-20T15:46:59+0800","dateFinished":"2021-05-20T15:46:59+0800","status":"FINISHED"},{"text":"%python.ipython\nnet(X)","user":"anonymous","dateUpdated":"2021-05-20T15:47:01+0800","progress":0,"config":{"colWidth":12,"fontSize":9,"results":{},"enabled":true,"editorSetting":{}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"array([[ 0.00181181, -0.0058778 ,  0.01754107, -0.00127788, -0.05876   ,\n         0.03788371, -0.05864979, -0.11651754, -0.11309978, -0.01879022],\n       [-0.01692843,  0.00825821, -0.01553725, -0.01872864, -0.04593193,\n         0.08432943, -0.05550903, -0.09225193, -0.09436436, -0.00365851]])"}]},"apps":[],"runtimeInfos":{},"progressUpdateIntervalMs":500,"jobName":"paragraph_1621494726514_1161800822","id":"paragraph_1621494726514_1161800822","dateCreated":"2021-05-20T15:12:06+0800","dateStarted":"2021-05-20T15:47:01+0800","dateFinished":"2021-05-20T15:47:01+0800","status":"FINISHED"},{"text":"%python.ipython\n\n# 调用网络之后，各层的输入向量大小才确定\nnet","user":"anonymous","dateUpdated":"2021-05-20T15:47:02+0800","progress":0,"config":{"colWidth":12,"fontSize":9,"results":{},"enabled":true,"editorSetting":{}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Sequential(\n  (0): Dense(22 -> 256, Activation(relu))\n  (1): Dense(256 -> 10, linear)\n)"}]},"apps":[],"runtimeInfos":{},"progressUpdateIntervalMs":500,"jobName":"paragraph_1621494778472_868998993","id":"paragraph_1621494778472_868998993","dateCreated":"2021-05-20T15:12:58+0800","dateStarted":"2021-05-20T15:47:02+0800","dateFinished":"2021-05-20T15:47:03+0800","status":"FINISHED"},{"text":"%python.ipython\n\n# 访问网络的参数：bias\nprint(type(net[1].weight))\nprint(net[1].weight)\nprint(net[1].weight.data())","user":"anonymous","dateUpdated":"2021-05-20T15:56:09+0800","progress":0,"config":{"colWidth":12,"fontSize":9,"results":{},"enabled":true,"editorSetting":{}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"<class 'mxnet.gluon.parameter.Parameter'>\nParameter dense7_weight (shape=(10, 256), dtype=float32)\n[[-0.06746687 -0.05952224 -0.05636147 ...  0.01186746 -0.01932929\n   0.01400435]\n [ 0.04248565 -0.03242105  0.04856858 ... -0.02739973  0.0351235\n  -0.05647979]\n [-0.04827031  0.0686476  -0.06291659 ...  0.04598614  0.05002976\n  -0.05934634]\n ...\n [-0.00413316 -0.04456858 -0.05790441 ... -0.00302498 -0.01361559\n   0.00777604]\n [-0.05140207 -0.06964864 -0.02716374 ...  0.0539028   0.0536719\n   0.00961332]\n [ 0.06790815 -0.04081453  0.03949503 ...  0.0238308  -0.05404767\n  -0.02771015]]\n"}]},"apps":[],"runtimeInfos":{},"progressUpdateIntervalMs":500,"jobName":"paragraph_1621497350184_140806588","id":"paragraph_1621497350184_140806588","dateCreated":"2021-05-20T15:55:50+0800","dateStarted":"2021-05-20T15:56:09+0800","dateFinished":"2021-05-20T15:56:09+0800","status":"FINISHED"},{"text":"%python.ipython\nnet[1].weight.grad()","user":"anonymous","dateUpdated":"2021-05-20T16:06:18+0800","progress":0,"config":{"colWidth":12,"fontSize":9,"results":{},"enabled":true,"editorSetting":{}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"array([[0., 0., 0., ..., 0., 0., 0.],\n       [0., 0., 0., ..., 0., 0., 0.],\n       [0., 0., 0., ..., 0., 0., 0.],\n       ...,\n       [0., 0., 0., ..., 0., 0., 0.],\n       [0., 0., 0., ..., 0., 0., 0.],\n       [0., 0., 0., ..., 0., 0., 0.]])"}]},"apps":[],"runtimeInfos":{},"progressUpdateIntervalMs":500,"jobName":"paragraph_1621497975277_2138130870","id":"paragraph_1621497975277_2138130870","dateCreated":"2021-05-20T16:06:15+0800","dateStarted":"2021-05-20T16:06:18+0800","dateFinished":"2021-05-20T16:06:18+0800","status":"FINISHED"},{"text":"%python.ipython\n\n# 访问网络的参数：bias\nprint(type(net[1].bias))\nprint(net[1].bias)\nprint(net[1].bias.data())","user":"anonymous","dateUpdated":"2021-05-20T15:54:05+0800","progress":0,"config":{"colWidth":12,"fontSize":9,"results":{},"enabled":true,"editorSetting":{}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"<class 'mxnet.gluon.parameter.Parameter'>\nParameter dense7_bias (shape=(10,), dtype=float32)\n[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]\n"}]},"apps":[],"runtimeInfos":{},"progressUpdateIntervalMs":500,"jobName":"paragraph_1621495472708_1124794464","id":"paragraph_1621495472708_1124794464","dateCreated":"2021-05-20T15:24:32+0800","dateStarted":"2021-05-20T15:53:38+0800","dateFinished":"2021-05-20T15:53:38+0800","status":"FINISHED"},{"text":"%python.ipython\nprint(net.collect_params())","user":"anonymous","dateUpdated":"2021-05-20T16:06:48+0800","progress":0,"config":{"colWidth":12,"fontSize":9,"results":{},"enabled":true,"editorSetting":{}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"sequential3_ (\n  Parameter dense6_weight (shape=(256, 22), dtype=float32)\n  Parameter dense6_bias (shape=(256,), dtype=float32)\n  Parameter dense7_weight (shape=(10, 256), dtype=float32)\n  Parameter dense7_bias (shape=(10,), dtype=float32)\n)\n"}]},"apps":[],"runtimeInfos":{},"progressUpdateIntervalMs":500,"jobName":"paragraph_1621497218500_1654030532","id":"paragraph_1621497218500_1654030532","dateCreated":"2021-05-20T15:53:38+0800","dateStarted":"2021-05-20T16:06:48+0800","dateFinished":"2021-05-20T16:06:48+0800","status":"FINISHED"},{"text":"%md\n# GPU使用","user":"anonymous","dateUpdated":"2021-05-20T16:27:23+0800","progress":0,"config":{"colWidth":12,"fontSize":9,"editorHide":true,"results":{},"enabled":true,"editorSetting":{}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h1>GPU使用</h1>\n\n</div>"}]},"apps":[],"runtimeInfos":{},"progressUpdateIntervalMs":500,"jobName":"paragraph_1621498969827_838833181","id":"paragraph_1621498969827_838833181","dateCreated":"2021-05-20T16:22:49+0800","dateStarted":"2021-05-20T16:27:23+0800","dateFinished":"2021-05-20T16:27:23+0800","status":"FINISHED"},{"text":"%python.ipython\n\nnpx.num_gpus()","user":"anonymous","dateUpdated":"2021-05-20T16:16:44+0800","progress":0,"config":{"colWidth":12,"fontSize":9,"results":{},"enabled":true,"editorSetting":{}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"0"}]},"apps":[],"runtimeInfos":{},"progressUpdateIntervalMs":500,"jobName":"paragraph_1621498004014_1544081802","id":"paragraph_1621498004014_1544081802","dateCreated":"2021-05-20T16:06:44+0800","dateStarted":"2021-05-20T16:16:44+0800","dateFinished":"2021-05-20T16:16:44+0800","status":"FINISHED"},{"text":"%python.ipython\n\n\ntry:\n    x = np.array([1, 2, 3], ctx=npx.gpu())\nexcept:\n    x = np.array([1, 2, 3], ctx=npx.cpu())\nx.ctx","user":"anonymous","dateUpdated":"2021-05-20T16:27:03+0800","progress":0,"config":{"colWidth":12,"fontSize":9,"results":{},"enabled":true,"editorSetting":{}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"cpu(0)"}]},"apps":[],"runtimeInfos":{},"progressUpdateIntervalMs":500,"jobName":"paragraph_1621498531812_1050380816","id":"paragraph_1621498531812_1050380816","dateCreated":"2021-05-20T16:15:31+0800","dateStarted":"2021-05-20T16:27:03+0800","dateFinished":"2021-05-20T16:27:03+0800","status":"FINISHED"},{"text":"%python.ipython\n\nconv = nn.Conv2D(channels=6, kernel_size=5, padding=2, activation='sigmoid')\nprint(type(conv))\nprint(conv.collect_params())\nprint(conv._kwargs)\nprint(type(conv._kwargs['kernel']))\nprint(conv.weight.data())\n","user":"anonymous","dateUpdated":"2021-05-20T18:23:48+0800","progress":0,"config":{"colWidth":12,"fontSize":9,"results":{},"enabled":true,"editorSetting":{}},"settings":{"params":{},"forms":{}},"results":{"code":"ERROR","msg":[{"type":"TEXT","data":"<class 'mxnet.gluon.nn.conv_layers.Conv2D'>\nconv23_ (\n  Parameter conv23_weight (shape=(6, -1, 5, 5), dtype=<class 'numpy.float32'>)\n  Parameter conv23_bias (shape=(6,), dtype=<class 'numpy.float32'>)\n)\n{'kernel': (5, 5), 'stride': (1, 1), 'dilate': (1, 1), 'pad': (2, 2), 'num_filter': 6, 'num_group': 1, 'no_bias': False, 'layout': 'NCHW'}\n<class 'tuple'>\n\u001b[0;31m---------------------------------------------------------------------------\u001b[0m\n\u001b[0;31mRuntimeError\u001b[0m                              Traceback (most recent call last)\n\u001b[0;32m<ipython-input-58-484b9e1402d0>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mconv\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_kwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mconv\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_kwargs\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'kernel'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 6\u001b[0;31m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mconv\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mweight\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\n\u001b[0;32m~/.local/lib/python3.8/site-packages/mxnet/gluon/parameter.py\u001b[0m in \u001b[0;36mdata\u001b[0;34m(self, ctx)\u001b[0m\n\u001b[1;32m    572\u001b[0m                                \u001b[0;34m\"because its storage type is %s. Please use row_sparse_data() \"\u001b[0m\u001b[0;31m \u001b[0m\u001b[0;31m\\\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    573\u001b[0m                                \"instead.\" % (self.name, str(ctx), self._stype))\n\u001b[0;32m--> 574\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_check_and_get\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_data\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mctx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    575\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    576\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mlist_data\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\n\u001b[0;32m~/.local/lib/python3.8/site-packages/mxnet/gluon/parameter.py\u001b[0m in \u001b[0;36m_check_and_get\u001b[0;34m(self, arr_list, ctx)\u001b[0m\n\u001b[1;32m    234\u001b[0m                 \u001b[0;34m\"You can also avoid deferred initialization by specifying in_units, \"\u001b[0m\u001b[0;31m \u001b[0m\u001b[0;31m\\\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    235\u001b[0m                 \"num_features, etc., for network layers.\"%(self.name))\n\u001b[0;32m--> 236\u001b[0;31m         raise RuntimeError(\n\u001b[0m\u001b[1;32m    237\u001b[0m             \u001b[0;34m\"Parameter '%s' has not been initialized. Note that \"\u001b[0m\u001b[0;31m \u001b[0m\u001b[0;31m\\\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    238\u001b[0m             \u001b[0;34m\"you should initialize parameters and create Trainer \"\u001b[0m\u001b[0;31m \u001b[0m\u001b[0;31m\\\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\n\u001b[0;31mRuntimeError\u001b[0m: Parameter 'conv23_weight' has not been initialized. Note that you should initialize parameters and create Trainer with Block.collect_params() instead of Block.params because the later does not include Parameters of nested child Blocks"}]},"apps":[],"runtimeInfos":{},"progressUpdateIntervalMs":500,"jobName":"paragraph_1621499078442_1244304928","id":"paragraph_1621499078442_1244304928","dateCreated":"2021-05-20T16:24:38+0800","dateStarted":"2021-05-20T18:23:48+0800","dateFinished":"2021-05-20T18:23:48+0800","status":"ERROR"},{"text":"","user":"anonymous","dateUpdated":"2021-05-20T17:57:47+0800","progress":0,"config":{"colWidth":12,"fontSize":9,"results":{},"enabled":true,"editorSetting":{}},"settings":{"params":{},"forms":{}},"apps":[],"runtimeInfos":{},"progressUpdateIntervalMs":500,"jobName":"paragraph_1621504657204_2106583706","id":"paragraph_1621504657204_2106583706","dateCreated":"2021-05-20T17:57:37+0800","status":"READY"}],"name":"MXNet 教程","id":"2G6S92URS","defaultInterpreterGroup":"spark","version":"0.9.0","noteParams":{},"noteForms":{},"angularObjects":{},"config":{"isZeppelinNotebookCronEnable":false,"looknfeel":"default","personalizedMode":"false"},"info":{},"path":"/My Notebooks/MXNet 教程"}